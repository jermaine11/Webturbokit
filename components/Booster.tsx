import React, { useState, useEffect, useCallback } from 'react';
import type { OptimizationStatus, PerformanceTip } from '../types';
import { getPerformanceTips } from '../services/geminiService';
import { ProgressBar } from './ProgressBar';
import { TipsDisplay } from './TipsDisplay';
import { RocketIcon, CheckCircleIcon, SparklesIcon } from './icons';

const OPTIMIZATION_STEPS = [
  "Initializing quantum accelerators...",
  "Defragmenting memory caches...",
  "Optimizing TCP/IP stack...",
  "Flushing DNS resolver cache...",
  "Re-calibrating JavaScript V8 engine...",
  "Compressing local storage blobs...",
  "Unleashing giga-cores...",
  "Purging rogue extensions...",
  "Finalizing optimization...",
  "Boost Complete!",
];

export const Booster: React.FC = () => {
  const [status, setStatus] = useState<OptimizationStatus>('idle');
  const [progress, setProgress] = useState(0);
  const [logs, setLogs] = useState<string[]>([]);
  const [tips, setTips] = useState<PerformanceTip[]>([]);
  const [isFetchingTips, setIsFetchingTips] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isCopied, setIsCopied] = useState(false);

  const handleFetchTips = useCallback(async () => {
    setIsFetchingTips(true);
    setError(null);
    try {
      const fetchedTips = await getPerformanceTips();
      setTips(fetchedTips);
    } catch (e) {
      setError(e instanceof Error ? e.message : 'An unknown error occurred.');
    } finally {
      setIsFetchingTips(false);
    }
  }, []);

  useEffect(() => {
    let progressInterval: number | undefined;

    if (status === 'boosting') {
      let currentProgress = 0;
      // FIX: Use `window.setInterval` to ensure the return type is `number` in a browser environment,
      // resolving the `NodeJS.Timeout` vs `number` type mismatch.
      progressInterval = window.setInterval(() => {
        currentProgress += 1;
        setProgress(currentProgress);
        
        const logIndex = Math.floor((currentProgress / 100) * (OPTIMIZATION_STEPS.length -1));
        if (logs.length <= logIndex) {
            setLogs(prev => [...prev, OPTIMIZATION_STEPS[logIndex]]);
        }
        
        if (currentProgress >= 100) {
          window.clearInterval(progressInterval);
          setLogs(prev => [...prev, OPTIMIZATION_STEPS[OPTIMIZATION_STEPS.length-1]]);
          setStatus('complete');
        }
      }, 80);
    }
    
    return () => window.clearInterval(progressInterval);
  }, [status, logs.length]);
  
  // Automatically fetch tips when optimization is complete
  useEffect(() => {
    if (status === 'complete' && tips.length === 0 && !isFetchingTips) {
      handleFetchTips();
    }
  }, [status, tips.length, handleFetchTips, isFetchingTips]);


  const handleBoost = () => {
    setStatus('boosting');
    setLogs([OPTIMIZATION_STEPS[0]]);
    setProgress(0);
    setTips([]);
    setError(null);
    setIsCopied(false);
  };

  const handleReset = () => {
    setStatus('idle');
    setProgress(0);
    setLogs([]);
    setTips([]);
    setError(null);
    setIsCopied(false);
  };

  const handleShare = () => {
    if (isCopied || tips.length === 0) return;

    const shareText = [
      "ðŸš€ I just boosted my browser with Web Turbo Kit and got these AI-powered tips from Gemini:",
      ...tips.map(tip => `- ${tip.title}: ${tip.description}`),
      "Check it out!"
    ].join('\n');

    navigator.clipboard.writeText(shareText).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2500);
    }).catch(err => {
      console.error('Failed to copy text: ', err);
      setError("Could not copy tips to clipboard.");
    });
  };

  const handleDownload = () => {
    if (tips.length === 0) return;

    const fileContent = [
      "ðŸš€ Web Turbo Kit - AI Performance Tips from Gemini ðŸš€",
      "======================================================\n",
      ...tips.map(tip => `[${tip.category}] ${tip.title}\n- ${tip.description}\n`),
      "======================================================",
      "Generated by Web Turbo Kit."
    ].join('\n');

    const blob = new Blob([fileContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'web-turbo-kit-performance-tips.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  const renderContent = () => {
    if (status === 'idle') {
      return (
        <div className="text-center animate-fade-in">
          <button
            onClick={handleBoost}
            className="bg-accent text-navy font-bold text-xl px-8 py-4 rounded-lg hover:bg-opacity-80 transition-all duration-300 transform hover:scale-105 flex items-center gap-3 shadow-lg shadow-accent/20"
          >
            <RocketIcon className="w-6 h-6" />
            Boost My Browser
          </button>
        </div>
      );
    }

    return (
      <div className="animate-fade-in">
        <div className="flex items-center gap-4 mb-4">
           {status === 'complete' ? <CheckCircleIcon className="w-8 h-8 text-accent flex-shrink-0" /> : <div className="w-8 h-8 border-4 border-accent border-t-transparent rounded-full animate-spin flex-shrink-0"></div> }
          <h2 className="text-2xl font-bold text-lightest-slate">{status === 'boosting' ? 'Optimizing...' : 'Optimization Complete!'}</h2>
        </div>

        <ProgressBar progress={progress} />

        <div className="mt-6 p-4 bg-light-navy rounded-lg max-h-48 overflow-y-auto font-mono text-sm">
          {logs.map((log, index) => (
            <p key={index} className="text-light-slate animate-slide-in" style={{animationDelay: `${index * 100}ms`}}>
              <span className="text-accent mr-2">{'>'}</span>{log}
            </p>
          ))}
        </div>
      </div>
    );
  };

  const renderTipsSection = () => {
    if (status !== 'complete') return null;

    if (isFetchingTips) {
        return (
            <div className="mt-8 text-center animate-fade-in flex flex-col items-center gap-4">
                 <div className="w-8 h-8 border-4 border-accent border-t-transparent rounded-full animate-spin"></div>
                 <p className="text-slate flex items-center gap-2"><SparklesIcon className="w-5 h-5" /> Getting AI performance tips...</p>
            </div>
        );
    }

    if (tips.length > 0) {
        return <TipsDisplay tips={tips} onShare={handleShare} onReset={handleReset} isCopied={isCopied} onDownload={handleDownload} />;
    }

    return null;
  }

  return (
    <>
      {renderContent()}
      {renderTipsSection()}
      {error && !isFetchingTips && <p className="mt-4 text-center text-red-400 animate-fade-in">{error}</p>}
    </>
  );
};
