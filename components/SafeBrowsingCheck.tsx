import React, { useState, useEffect, useCallback } from 'react';
import type { OptimizationStatus, SafeBrowsingTip, SafeBrowsingCategory } from '../types';
import { getSafeBrowsingTips } from '../services/geminiService';
import { ProgressBar } from './ProgressBar';
import { ShieldCheckIcon, CheckCircleIcon, SparklesIcon, KeyIcon, EyeSlashIcon, AlertTriangleIcon, RefreshIcon, OtherIcon, DownloadIcon } from './icons';

const SAFE_BROWSING_STEPS = [
  "Initializing security protocols...",
  "Scanning for malicious extensions...",
  "Verifying site certificates...",
  "Checking for known phishing domains...",
  "Analyzing content security policies...",
  "Auditing extension permissions...",
  "Cross-referencing threat intelligence feeds...",
  "Strengthening data encryption layer...",
  "Finalizing security posture...",
  "Check Complete!",
];

export const SafeBrowsingCheck: React.FC = () => {
  const [status, setStatus] = useState<OptimizationStatus>('idle');
  const [progress, setProgress] = useState(0);
  const [logs, setLogs] = useState<string[]>([]);
  const [tips, setTips] = useState<SafeBrowsingTip[]>([]);
  const [isFetchingTips, setIsFetchingTips] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleFetchTips = useCallback(async () => {
    setIsFetchingTips(true);
    setError(null);
    try {
      const fetchedTips = await getSafeBrowsingTips();
      setTips(fetchedTips);
    } catch (e) {
      setError(e instanceof Error ? e.message : 'An unknown error occurred.');
    } finally {
      setIsFetchingTips(false);
    }
  }, []);

  useEffect(() => {
    let progressInterval: number | undefined;

    if (status === 'boosting') { // 'boosting' status is used for the checking process
      let currentProgress = 0;
      // FIX: Use `window.setInterval` to ensure the return type is `number` in a browser environment,
      // resolving the `NodeJS.Timeout` vs `number` type mismatch.
      progressInterval = window.setInterval(() => {
        currentProgress += 1;
        setProgress(currentProgress);
        
        const logIndex = Math.floor((currentProgress / 100) * (SAFE_BROWSING_STEPS.length -1));
        if (logs.length <= logIndex) {
            setLogs(prev => [...prev, SAFE_BROWSING_STEPS[logIndex]]);
        }
        
        if (currentProgress >= 100) {
          window.clearInterval(progressInterval);
          setLogs(prev => [...prev, SAFE_BROWSING_STEPS[SAFE_BROWSING_STEPS.length-1]]);
          setStatus('complete');
        }
      }, 80);
    }
    
    return () => window.clearInterval(progressInterval);
  }, [status, logs.length]);
  
  useEffect(() => {
    if (status === 'complete' && tips.length === 0 && !isFetchingTips) {
      handleFetchTips();
    }
  }, [status, tips.length, handleFetchTips, isFetchingTips]);


  const handleCheck = () => {
    setStatus('boosting');
    setLogs([SAFE_BROWSING_STEPS[0]]);
    setProgress(0);
    setTips([]);
    setError(null);
  };

  const handleReset = () => {
    setStatus('idle');
    setProgress(0);
    setLogs([]);
    setTips([]);
    setError(null);
  };

  const handleDownload = () => {
    if (tips.length === 0) return;

    const fileContent = [
      "🛡️ Web Turbo Kit - AI Security Tips from Gemini 🛡️",
      "====================================================\n",
      ...tips.map(tip => `[${tip.category}] ${tip.title}\n- ${tip.description}\n`),
      "====================================================",
      "Generated by Web Turbo Kit."
    ].join('\n');

    const blob = new Blob([fileContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'web-turbo-kit-security-tips.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  const renderContent = () => {
    if (status === 'idle') {
      return (
        <div className="text-center animate-fade-in">
          <button
            onClick={handleCheck}
            className="bg-accent text-navy font-bold text-xl px-8 py-4 rounded-lg hover:bg-opacity-80 transition-all duration-300 transform hover:scale-105 flex items-center gap-3 shadow-lg shadow-accent/20"
          >
            <ShieldCheckIcon className="w-6 h-6" />
            Run Safe Browsing Check
          </button>
        </div>
      );
    }

    return (
      <div className="animate-fade-in">
        <div className="flex items-center gap-4 mb-4">
           {status === 'complete' ? <CheckCircleIcon className="w-8 h-8 text-accent flex-shrink-0" /> : <div className="w-8 h-8 border-4 border-accent border-t-transparent rounded-full animate-spin flex-shrink-0"></div> }
          <h2 className="text-2xl font-bold text-lightest-slate">{status === 'boosting' ? 'Checking...' : 'Security Check Complete!'}</h2>
        </div>

        <ProgressBar progress={progress} />

        <div className="mt-6 p-4 bg-light-navy rounded-lg max-h-48 overflow-y-auto font-mono text-sm">
          {logs.map((log, index) => (
            <p key={index} className="text-light-slate animate-slide-in" style={{animationDelay: `${index * 100}ms`}}>
              <span className="text-accent mr-2">{'>'}</span>{log}
            </p>
          ))}
        </div>
      </div>
    );
  };

  const categoryIcons: Record<SafeBrowsingCategory, React.ReactNode> = {
    Privacy: <EyeSlashIcon className="w-6 h-6 text-accent" />,
    Phishing: <AlertTriangleIcon className="w-6 h-6 text-accent" />,
    Passwords: <KeyIcon className="w-6 h-6 text-accent" />,
    Updates: <RefreshIcon className="w-6 h-6 text-accent" />,
    General: <OtherIcon className="w-6 h-6 text-accent" />,
  };

  const renderTipsSection = () => {
    if (status !== 'complete') return null;

    if (isFetchingTips) {
        return (
            <div className="mt-8 text-center animate-fade-in flex flex-col items-center gap-4">
                 <div className="w-8 h-8 border-4 border-accent border-t-transparent rounded-full animate-spin"></div>
                 <p className="text-slate flex items-center gap-2"><SparklesIcon className="w-5 h-5" /> Getting AI security tips...</p>
            </div>
        );
    }

    if (tips.length > 0) {
      return (
        <div className="mt-8 animate-fade-in">
          <h3 className="text-2xl font-bold text-lightest-slate mb-4 text-center">Your AI Security Tips</h3>
          <div className="space-y-4">
            {tips.map((tip, index) => (
              <div
                key={index}
                className="bg-navy p-5 rounded-lg border border-lightest-navy/20 animate-slide-in"
                style={{ animationDelay: `${index * 150}ms` }}
              >
                <div className="flex items-center gap-4">
                  <div className="flex-shrink-0 bg-lightest-navy/10 p-3 rounded-full">
                    <span className="sr-only">{tip.category}</span>
                    {categoryIcons[tip.category] || categoryIcons.General}
                  </div>
                  <div>
                    <h4 className="font-bold text-lg text-lightest-slate">{tip.title}</h4>
                    <p className="text-slate text-base mt-1">{tip.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          <div className="mt-8 flex flex-col sm:flex-row items-center justify-center gap-4 animate-fade-in" style={{animationDelay: `${tips.length * 150}ms`}}>
             <button
              onClick={handleDownload}
              className="bg-accent text-navy font-bold text-lg px-6 py-3 rounded-lg hover:bg-opacity-80 transition-all duration-300 transform hover:scale-105 flex items-center gap-3 w-full sm:w-auto justify-center"
            >
              <DownloadIcon className="w-6 h-6" />
              Download Tips
            </button>
            <button
              onClick={handleReset}
              className="bg-lightest-navy text-accent border border-accent font-bold text-lg px-6 py-3 rounded-lg hover:bg-accent/10 transition-colors duration-300 flex items-center gap-3 w-full sm:w-auto justify-center"
            >
              <RefreshIcon className="w-6 h-6" />
              Check Again
            </button>
          </div>
        </div>
      );
    }

    return null;
  }

  return (
    <>
      {renderContent()}
      {renderTipsSection()}
      {error && !isFetchingTips && <p className="mt-4 text-center text-red-400 animate-fade-in">{error}</p>}
    </>
  );
};
